"""
题目2:
一个大小是M*N大小的白色画板P(r=255,g=255,b=255),
即M像素*N像素,每个像素由r、g、b共 3个颜色组成,每个颜色值是0~255。
设计一个方法、数据结构，实现对这张白色图片绘制一些实心矩形。
函数声明大概是 draw(P, 矩形数据， 绘制颜色)，
支持2种输出：A:打印图片结果 B：存到文件中(不需要读取功能)

可以打印结果(打印数值即可，不要绘图api、不要绘图api、不要绘图) , PrintImg(P)：
（r,g,b）(r,g,b) (r,g,b).....
（r,g,b）(r,g,b) (r,g,b).....
（r,g,b）(r,g,b) (r,g,b).....
...
存到文件中 , SaveImg(P)：
f = open(filename, 'w')
f.write(P)
"""
import os
import unittest


class Picture:
    def __init__(self, M, N):
        # 初始化一张像素M*N的白色图片
        self.P = [[[255, 255, 255] for i in range(M)] for i in range(N)]

    def draw(self, para_reg, color):
        # para_reg的位置上 画上color颜色的矩形
        for i in range(para_reg[0][0], para_reg[1][0] + 1):
            for j in range(para_reg[0][1], para_reg[1][1] + 1):
                self.P[i][j] = color

    def printImg(self):
        # 打印图像信息
        print(self.P)
        return self.P

    def saveImg(self, filename):
        # 将图像信息保存在filename文件中
        with open(filename, 'w') as f:
            f.write(str(self.P))


class Testq2(unittest.TestCase):

    def setUp(self):
        print('开始q2的测试')
        os.system('rm -f ./img.txt')

        self.P = Picture(10, 10)
        self.P.draw([[2, 3], [6, 8]], [1, 2, 3])

    def tearDown(self):
        os.system('rm -f ./img.txt')
        print('q2的测试结束')

    def test_printimg(self):
        p_result = [[[255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255]],
                    [[255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255]],
                    [[255, 255, 255], [255, 255, 255], [255, 255, 255], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [255, 255, 255]],
                    [[255, 255, 255], [255, 255, 255], [255, 255, 255], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [255, 255, 255]],
                    [[255, 255, 255], [255, 255, 255], [255, 255, 255], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [255, 255, 255]],
                    [[255, 255, 255], [255, 255, 255], [255, 255, 255], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [255, 255, 255]],
                    [[255, 255, 255], [255, 255, 255], [255, 255, 255], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [255, 255, 255]],
                    [[255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255]],
                    [[255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255]],
                    [[255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255]]]

        self.assertEqual(self.P.printImg(),p_result)

    def test_saveImg(self):
        self.P.saveImg('./img.txt')
        self.assertEqual(os.path.isfile('./img.txt'),True)


if __name__ == '__main__':
    unittest.main(verbosity=2)